#!/usr/bin/perl

# This script is unsupported. Use at your own risk.

# ./configula  --alogin=cryptodbwww --adb=cryp120n --udb=apicomm q1.cryptodb.org

# writes model-config.xml, model.prop  from
# coresponding *.sample files

# This script is rated 'chmod +x'

use strict;
use File::Basename;
use File::Path qw(make_path);
use Cwd qw(realpath);
use Fcntl ':mode';
use DBI;
use XML::Twig;
use XML::Simple;
use Getopt::Long;
use File::Copy;

my ($this_script) = basename $0;
print $this_script . ' $Revision$' . "\n";

my %dblinkMap;
####################################################################
# project defaults
####################################################################
# shared
my $g_platform = "Oracle";
my $g_userLoginSchema = "userlogins3";
my $g_showConnections = "false";
my $g_showConnectionsInterval = "10";
my $g_showConnectionsDuration = "600";
my $g_maxActive = "20";
my $g_maxWait = "50";
my $g_userDbLink = '@prods.login_comment';
my $g_use_map = 0;
my $g_skip_db_test = 0;

# model-config
my $modelName = "OrthoMCL";
my $smtpServer = "127.0.0.1";
my $defaultRole = "wdk_user";
my $secretKeyFile = '/usr/local/tomcat_instances/shared/.apidb_wdk_key';
my $appDb_login = "";
my $appDb_password = "";
my $appDb_connectionUrl = "";
my $appDb_maxIdle = "10";
my $appDb_minIdle = "1";
my $userDb_login = "";
my $userDb_password = "";
my $userDb_connectionUrl = "";
my $userDb_maxIdle = "1";
my $userDb_minIdle = "0";
my $userDb_wdkEngineSchema = "wdkengine." ;
my $userDb_userSchema = "userlogins3.";

my $site_admin_email = 'mheiges@uga.edu, aurreco@uga.edu';

# profileSimilarity-config
my %numTimePoints = ('PlasmoDB' => '48', 'ToxoDB' => '12');
my %skipTimes = ('PlasmoDB' => '23,29', 'ToxoDB' => '');

####################################################################
# user input
####################################################################

my (
    $appDb_login,
    $appDb_database,
    $userDb_database,
    $recreate_wdkCache
);

{
  local $SIG{__WARN__} = sub { 
    my $message = shift;
    die "FATAL: " . $message;
  };
  
  my $optRslt = GetOptions(
      "alogin=s"   => \$appDb_login,
      "adb=s"      => \$appDb_database,
      "udb=s"      => \$userDb_database,
      "newcache"   => \$recreate_wdkCache,
      "usemap"     => \$g_use_map,  # get config data from a master file from gus_home/config
      "skipdbtest" => \$g_skip_db_test, # for when you know this will fail
      );
}

my $target_site = lc $ARGV[0];


####################################################################
# system values
####################################################################
my $euparc = find_euparc();
my $web_base_dir = '/var/www';
my $site_symlink = "$web_base_dir/$target_site";
my $product = dirname(readlink $site_symlink);
my $project_home = realpath("$site_symlink/project_home");
my $gus_home = realpath("$site_symlink/gus_home");
my $wdk_config_dir = "$gus_home/config";
my $wdk_product_config_dir = "$gus_home/config/$product";
my $blast_app_path = "/opt/WU_BLAST";
my $blast_tmp_dir = "/var/www/Common/tmp/blast";
my $map_file = "$wdk_config_dir/master_configuration_set";
my $webapp = basename(readlink $site_symlink);
my ($webapp_nover) = $webapp =~ m/(^[a-zA-Z_]+)/;

# read for product version number
my $wdk_model_xml = "$gus_home/lib/wdk/OrthoMCL.xml";

my %config_files = (
    'wdk_model_xml' => {
        'source' => "$project_home/OrthoMCLShared/Model/lib/wdk/OrthoMCL.xml",
        'dest' => "$gus_home/lib/wdk/OrthoMCL.xml"
        },
    'model_config' => {
        'source' => "$project_home/OrthoMCLWebsite/Model/config/$product/model-config.xml.sample",
        'dest' => "$wdk_product_config_dir/model-config.xml"
        },
    'model_prop' => {
        'source' => "$project_home/OrthoMCLWebsite/Model/config/$product/model.prop.sample",
        'dest' => "$wdk_product_config_dir/model.prop"
        },
    'blast_config' => {
        'source' => "$project_home/OrthoMCLWebService/WSFPlugin/config/blast-config.xml.sample",
        'dest' => "$wdk_config_dir/blast-config.xml"
        },
);

# Install all configuration files from source sample files.
# Note that later we may reopen the source file and parse it into the dest file,
# so this blanket copy step may include some unnecessary copying.
for my $cf (keys %config_files) {
   print dirname($config_files{$cf}{'dest'}) . "\n";
    make_path(dirname($config_files{$cf}{'dest'}), {verbose => 1});
    copy( 
        $config_files{$cf}{'source'},
        $config_files{$cf}{'dest'} 
    ) or die "copy $config_files{$cf}{'source'} failed : $!";
}


my %site_versions = site_versions();
my $site_version = $site_versions{$product};
my $common_webservices_dir = (-e "/var/www/Common/prodSiteFilesMirror") ?
    "Common/prodSiteFilesMirror/webServices" :
    "Common/devSiteFilesMirror/webServices";
my $webservice_files_mirror = "$web_base_dir/$common_webservices_dir";
my $rls_webservice_data_dir = "$webservice_files_mirror/$product/release-$site_version";

my $server_hostname = qx(/bin/hostname);

my $host_class = host_class();
####################################################################
# pre-flight sanity checks
####################################################################

if ( $g_use_map && ($appDb_login || $appDb_database || $userDb_database)) {
    die "can not set specific values when using --usemap\n";;
}

if ($g_use_map) {
    die "--usemap chosen but $map_file not found\n" unless ( -r $map_file);
}

####################################################################
####################################################################

if ($g_use_map) {
    open(my $fh, $map_file) or die $!;
    my @hits = grep /^$target_site/, <$fh>;
    (my $site, $appDb_database,  $userDb_database, $appDb_login,  $userDb_login) = split(/\s+/, @hits[0]);
    print "$appDb_login\@$appDb_database,  $userDb_login\@$userDb_database\n";
    if ( ! ($appDb_login && $appDb_database && $userDb_database) ) {
        die "$map_file does not have sufficient data for $target_site. Quitting with no changes made.\n";
    }
}

my ($prod_site) = $target_site =~ m/([^\.]+\.org)/;

my $appDb_password = std_password($appDb_login, $appDb_database);
my $appDb_connectionUrl = 'jdbc:oracle:oci:@' . $appDb_database;

if ( ! $appDb_password ) {
  die "Did not find password for $appDb_login in $euparc . Quitting with no changes made.\n";
}

my $userDb_login = $userDb_login || 'uga_fed';
my $userDb_password = std_password($userDb_login, $userDb_database);;
my $userDb_connectionUrl = 'jdbc:oracle:oci:@' . $userDb_database;

if ( ! $userDb_password ) {
  die "Did not find password for $appDb_login in $euparc . Quitting with no changes made.\n";
}


# webapp_nover is always valid thanks to apache redirects, and
# is especially desired for production sites
my $webServiceUrl = 'http://' . $target_site . '/' . $webapp_nover . '/services/WsfService';

####################################################################
# configuration sanity checks
####################################################################
warn "\nWARN: I do not know what dblink to use for '$userDb_database'\n" .
     "  I know about: " . join(', ', keys(%dblinkMap)) . "\n\n"
    if (dblink($userDb_database) eq '@');

testDbConnection($appDb_login, $appDb_password, $appDb_database);
testDbConnection($userDb_login, $userDb_password, $userDb_database);

if (! -d $webservice_files_mirror) {
  warn "\nWARN: '$webservice_files_mirror' does not exist\n\n";
} elsif (! -d $rls_webservice_data_dir) {
  warn "\nWARN: '$rls_webservice_data_dir' does not exist. \n" .
     "  Check that version '$site_version' in \n".
     "  '$wdk_model_xml'\n" .
     "  matches release-N directory.\n\n";
}
    
####################################################################
# Config File Parsing
####################################################################

# model-config.xml ##############################################
my $m_c= new XML::Twig( 
    keep_spaces => 1, 
    PrettyPrint => 'nice',
    keep_atts_order => 1,
    TwigHandlers => {
      'modelConfig'        => \&modelConfig,
      'appDb'              => \&appDb,
      'userDb'             => \&userDb,
      'emailContent'       => \&emailContent,
      'emailSubject'       => \&emailSubject,
    }
);

$m_c->parsefile($config_files{'model_config'}{'source'});

open(MC, ">$config_files{'model_config'}{'dest'}") || die "can not open $config_files{'model_config'}{'dest'}\n";
print "writing $config_files{'model_config'}{'dest'}\n";
$m_c->print(\*MC); 

recreate_wdkCache() if $recreate_wdkCache;


# model.prop #######################################################
print "writing $config_files{'model_prop'}{'dest'}\n";
parseprop();


# blast-config.xml ###############################################
# do nothing

####################################################################
# Subroutines
####################################################################

sub modelConfig {
    my ($twig, $node) = @_;
    $node->set_att('login'         => $appDb_login)          if (defined $node->att('login'));
    $node->set_att('password'      => $appDb_password)       if (defined $node->att('password'));
    $node->set_att('connectionUrl' => $appDb_connectionUrl)  if (defined $node->att('connectionUrl'));
    $node->set_att('supportEmail'  => 'help@' . $prod_site)  if (defined $node->att('supportEmail'));
    $node->set_att('webServiceUrl' => $webServiceUrl)        if (defined $node->att('webServiceUrl'));
    $node->set_att('secretKeyFile' => $secretKeyFile)        if (defined $node->att('secretKeyFile'));
    $node->set_att('modelName'     => $modelName)            if (defined $node->att('modelName'));
    $node->set_att('smtpServer'    => $smtpServer)           if (defined $node->att('smtpServer'));
    $node->set_att('defaultRole'   => $defaultRole)          if (defined $node->att('defaultRole'));
}

sub appDb {
    my ($twig, $node) = @_;
    $node->set_att('login'                    => $appDb_login)                if (defined $node->att('login'));
    $node->set_att('password'                 => $appDb_password)             if (defined $node->att('password'));
    $node->set_att('connectionUrl'            => $appDb_connectionUrl)        if (defined $node->att('connectionUrl'));
    $node->set_att('platform'                 => $g_platform)                 if (defined $node->att('platform'));
    $node->set_att('maxActive'                => $g_maxActive)                if (defined $node->att('maxActive'));
    $node->set_att('maxIdle'                  => $appDb_maxIdle)              if (defined $node->att('maxIdle'));
    $node->set_att('minIdle'                  => $appDb_minIdle)              if (defined $node->att('minIdle'));
    $node->set_att('maxWait'                  => $g_maxWait)                  if (defined $node->att('maxWait'));
    $node->set_att('showConnections'          => $g_showConnections)          if (defined $node->att('showConnections'));
    $node->set_att('showConnectionsInterval'  => $g_showConnectionsInterval)  if (defined $node->att('showConnectionsInterval'));
    $node->set_att('showConnectionsDuration'  => $g_showConnectionsDuration)  if (defined $node->att('showConnectionsDuration'));
    $node->set_att('userDbLink'               => dblink($userDb_database))    if (defined $node->att('userDbLink'));
}

sub userDb {
    my ($twig, $node) = @_;
    $node->set_att('login'            => $userDb_login)               if (defined $node->att('login'));
    $node->set_att('password'         => $userDb_password)            if (defined $node->att('password'));
    $node->set_att('connectionUrl'    => $userDb_connectionUrl)       if (defined $node->att('connectionUrl'));
    $node->set_att('wdkEngineSchema'  => $userDb_wdkEngineSchema)     if (defined $node->att('wdkEngineSchema'));
    $node->set_att('userSchema'       => $userDb_userSchema)          if (defined $node->att('userSchema'));
}

sub emailContent {
    my ($twig, $node) = @_;

    my $content = <<"EOF";

           <p>Thank you for registering at $product.</p>
           <p>Your temporary password is: \$\$PASSWORD\$\$</p>
           <p>You may now login to <a href="http://$prod_site/">$product</a>.</p>
           <p>Thank you,</p>
           <p>$product</p>
EOF
    $node->set_content(XML::Twig::Elt->new( '#CDATA' => $content));
}

sub emailSubject {
    my ($twig, $node) = @_;
    $node->set_text("Your $product Password");
}

sub dblink {
    my ($apicomm) = @_;
    %dblinkMap = (
        'apicomms'    => 'prods.login_comment',
        'apicommn'    => 'prodn.login_comment',
        'apicommdevs' => 'devs.login_comment',
        'apicommdevn' => 'devn.login_comment',
    );
    
    return '@' . $dblinkMap{lc($apicomm)};
}

# retreive password from users ~/.euparc
sub std_password {
    my ($login, $database) = map{ lc } @_;
    
    my $rc = XMLin($euparc,
        ForceArray => ['user'],
        ForceContent => 1,
        KeyAttr => [ user => "login"],
        ContentKey => '-content',
    );
    
    return $rc->{database}->{$database}->{user}->{$login}->{password} ||
        $rc->{database}->{user}->{$login}->{password};
}

sub parseprop {
    my ($model_prop_sample) = @_;
    return;
}

sub host_class {
    my ($host_class) = $target_site =~ m/^([^\.]+)\./;
    $host_class = 'qa' if $host_class =~ m/^q/;
    $host_class = 'beta' if $host_class =~ m/^b/;
    $host_class = '' if $host_class =~ m/^w/;
    return $host_class;
}

sub webapp_domain_map {
    return {
        'amoeba'    => 'amoebadb.org',
        'cryptodb'  => 'cryptodb.org',
        'eupathdb'  => 'eupathdb.org',
        'fungidb'   => 'fungidb.org',
        'giardiadb' => 'giardiadb.org',
        'micro'     => 'microsporidiadb.org',
        'piro'      => 'piroplasmadb.org',
        'plasmo'    => 'plasmodb.org',
        'toxo'      => 'toxodb.org',
        'trichdb'   => 'trichdb.org',
        'tritrypdb' => 'tritrypdb.org',
    };
}

sub domain_from_webapp {
    my ($webapp) = @_;
    my ($webapp_nover) =  $webapp =~ m/(^[a-zA-Z_]+)/;
    my $map = webapp_domain_map();
    return $map->{$webapp_nover};
}

sub webapp_from_domain {
    my ($domain) = @_;
    my $map = webapp_domain_map();
    my %revmap = reverse %$map;
    return $revmap{lc $domain};
}

sub site_versions {
    my %site_versions;
    my $acm = new XML::Twig( 
        keep_spaces => 1, 
        PrettyPrint => 'nice',
        keep_atts_order => 1,
        TwigHandlers => {
          'constant[@name="releaseVersion"]'  => sub { 
             $site_versions{$_[1]->att("includeProjects")} = $_[1]->text;
           },
        }
    );
    $acm->parsefile("$wdk_model_xml");
    return %site_versions;
}

sub testDbConnection {
    my ($login, $password, $db) = @_;
    return if $g_skip_db_test;
    my $dbh = DBI->connect("dbi:Oracle:$db", $login, $password, {
          PrintError =>0,
          RaiseError =>0
        }) or warn "\nWARN: Can't connect to $db with $login: $DBI::errstr\n\n";;
    
    
}

sub find_euparc  {
    # ibuilder shell sets HOME to be the website and 
    # REAL_HOME to that of joeuser
    if ( -r "$ENV{REAL_HOME}/.euparc") {
        return "$ENV{REAL_HOME}/.euparc";
    } elsif ( -r "$ENV{HOME}/.euparc") {
        return "$ENV{HOME}/.euparc";
    }
    die "Required .euparc file not found\n";
}

sub recreate_wdkCache {
    print "creating new wdk cache\n";
    $ENV{PATH} = "$gus_home/bin:" . $ENV{PATH};
    $ENV{PERL5LIB} = "$gus_home/lib/perl:" . $ENV{PERL5LIB};
    $ENV{GUS_HOME} = "$gus_home";
    system("wdkCache -model $product -recreate");
}


