#!/usr/bin/perl

# This script is unsupported. Use at your own risk.

# ./configula  --alogin=cryptodbwww --adb=cryp120n --udb=apicomm q1.cryptodb.org

# Wrapper on eupathSiteConfigure
# see eupathSiteConfigure details at
# https://docs.google.com/a/apidb.org/document/d/1zy_HMf7BFf2L2ZhHHIr1K2GuTbQXJx1JdnoDOl_4OHE/
# This script
#   - autogenerates the metaConfig file for eupathSiteConfigure.
#   - validates the required properties in metaConfig file against sample
#     - fails if either missing or extraneous properties are found
#   - bootstraps many values from EuPathDB's file and directory naming conventions

# This script is rated 'chmod +x'

use strict;
use File::Basename;
use POSIX qw(strftime);
use lib "$ENV{'GUS_HOME'}/lib/perl";
use WDK::Model::Configula;

my ($this) = basename $0;

my $wmc = WDK::Model::Configula->new({
  'modelName' => 'OrthoMCL',
});

# myURL ensures that there is  a product => url mapping for this website.
# This is esp. important for HostDB and FungiDB which are
# not already mapped by the amebURL, crypURL, etc. properties.
# This does mean that myURL may be redunant with one of the
# other existing mappings but that's ok as far as the code is concerned.
#
# myURL for EuPathDB product needs an empty string (or just
# leave out the property) so the portal does not recursively
# call its own webservices.
my $myURL = "http://$wmc->{'canonical_hostname'}/$wmc->{'webapp_nover'}/";
$myURL =~ s|/$|| ;

my $content = <<"EOF";
# Generated by $this on @{[ strftime("%m/%d/%Y at %H:%M", localtime) ]}

required:
 project: $wmc->{'product'}

 appDb.instance: $wmc->{'appDb_name'}
 appDb.login: $wmc->{'appDb_login'}
 appDb.password: $wmc->{'appDb_password'}
 appDb.userDbLink:  @{[ $wmc->dblink($wmc->{'userDb_name'}) ]}

 userDb.instance: $wmc->{'userDb_name'}
 userDb.login: $wmc->{'userDb_login'}
 userDb.password: $wmc->{'userDb_password'}

 commentDb.instance: $wmc->{'userDb_name'}
 commentDb.login: $wmc->{'userDb_login'}
 commentDb.password: $wmc->{'userDb_password'}
 gushome: $wmc->{'gus_home'}
 
 # authentication method
 authenticationMethod: $wmc->{'authenticationMethod'}
 oauthUrl: $wmc->{'oauthUrl'}
 oauthClientId: $wmc->{'oauthClientId'}
 oauthClientSecret: $wmc->{'oauthClientSecret'}

 amebURL: http://$wmc->{'host_class_prefix'}amoebadb.org/amoeba/
 crypURL: http://$wmc->{'host_class_prefix'}cryptodb.org/cryptodb/
 fungURL: http://$wmc->{'host_class_prefix'}fungidb.org/fungidb/
 giarURL: http://$wmc->{'host_class_prefix'}giardiadb.org/giardiadb/
 micrURL: http://$wmc->{'host_class_prefix'}microsporidiadb.org/micro/
 piroURL: http://$wmc->{'host_class_prefix'}piroplasmadb.org/piro/
 plasURL: http://$wmc->{'host_class_prefix'}plasmodb.org/plasmo/
 toxoURL: http://$wmc->{'host_class_prefix'}toxodb.org/toxo/
 tricURL: http://$wmc->{'host_class_prefix'}trichdb.org/trichdb/
 trypURL: http://$wmc->{'host_class_prefix'}tritrypdb.org/tritrypdb/
 myURL: $myURL

sections:
 - orthomcl
 - production

custom:
  googleAnalyticsId: @{[ $wmc->{'google_analytics_id'} || "''" ]}

EOF

$wmc->write_meta_config($content);

####################################################################
# Do It!
####################################################################

my $sample = "$wmc->{'gus_home'}/lib/yaml/metaConfig.yaml.sample";

$wmc->validate_meta_config($sample, $wmc->{'meta_config_file'});

$wmc->do_configure('eupathSiteConfigure', $wmc->{'product'}, $wmc->{'meta_config_file'});

