#!/usr/bin/perl

# This script is unsupported. Use at your own risk.

# ./configula  --alogin=cryptodbwww --adb=cryp120n --udb=apicomm q1.cryptodb.org

# writes model-cconfig.xml, model.prop and comment-config.xml from
# coresponding *.sample files

# This script is rated 'chmod +x'

use strict;
use File::Basename;
use Cwd qw(realpath);
use Fcntl ':mode';
use DBI;
use XML::Twig;
use XML::Simple;
use Getopt::Long;
use File::Copy;

my %dblinkMap;
####################################################################
# project defaults
####################################################################
# shared
my $g_platform = "Oracle";
my $g_userLoginSchema = "userlogins3";
my $g_commentSchema = "comments2";
my $g_showConnections = "false";
my $g_showConnectionsInterval = "10";
my $g_showConnectionsDuration = "600";
my $g_maxActive = "20";
my $g_maxWait = "50";
my $g_userDbLink = '@apidb.login_comment';
my $g_use_map = 0;
my $g_skip_db_test = 0;

# model-config
my $modelName = "apiCommonModel";
my $smtpServer = "127.0.0.1";
my $defaultRole = "wdk_user";
my $secretKeyFile = '/usr/local/tomcat_instances/shared/.apidb_wdk_key';
my $appDb_login = "";
my $appDb_password = "";
my $appDb_connectionUrl = "";
my $appDb_maxIdle = "10";
my $appDb_minIdle = "1";
my $userDb_login = "";
my $userDb_password = "";
my $userDb_connectionUrl = "";
my $userDb_maxIdle = "1";
my $userDb_minIdle = "0";
my $userDb_wdkEngineSchema = "wdkengine." ;
my $userDb_userSchema = "userlogins3.";

# comments-config
my $cc_maxIdle = "3";
my $cc_minIdle = "1";
my $cc_maxWait = "50";
my $cc_userFileSchema = "uploads";
my $cc_userFileUploadDir = "/var/www/Common/communityFilesMirror";

my $site_admin_email = 'mheiges@uga.edu, aurreco@uga.edu';

# profileSimilarity-config
my %numTimePoints = ('PlasmoDB' => '48', 'ToxoDB' => '12');
my %skipTimes = ('PlasmoDB' => '23,29', 'ToxoDB' => '');

####################################################################
# user input
####################################################################

my (
    $appDb_login,
    $appDb_database,
    $userDb_database,
    $recreate_wdkCache
);
my $optRslt = GetOptions(
    "alogin=s"   => \$appDb_login,
    "adb=s"      => \$appDb_database,
    "udb=s"      => \$userDb_database,
    "newcache"   => \$recreate_wdkCache,
    "usemap"     => \$g_use_map,  # get config data from a master file from gus_home/config
    "skipdbtest" => \$g_skip_db_test, # for when you know this will fail
    );

my $target_site = lc $ARGV[0];


####################################################################
# system values
####################################################################
my $euparc = find_euparc();
my $web_base_dir = '/var/www';
my $site_symlink = "$web_base_dir/$target_site";
my $product = dirname(readlink $site_symlink);
my $project_home = realpath("$site_symlink/project_home");
my $gus_home = realpath("$site_symlink/gus_home");
my $wdk_config_dir = "$gus_home/config";
my $wdk_product_config_dir = "$gus_home/config/$product";
my $blast_app_path = "/opt/WU_BLAST";
my $blast_tmp_dir = "/var/www/Common/tmp/blast";
my $map_file = "$wdk_config_dir/master_configuration_set";
my $webapp = basename(readlink $site_symlink);
my ($webapp_nover) = $webapp =~ m/(^[a-zA-Z_]+)/;

my $comment_config_origin            = "$project_home/ApiCommonWebsite/Model/config/$product/comment-config.xml.sample";
my $model_config_origin              = "$project_home/ApiCommonWebsite/Model/config/$product/model-config.xml.sample";
my $model_prop_origin                = "$project_home/ApiCommonWebsite/Model/config/$product/model.prop.sample";
my $wdkquery_config_origin           = "$project_home/ApiCommonWebService/WSFPlugin/config/wdkquery-config.xml.sample";
my $blast_config_origin              = "$project_home/ApiCommonWebService/WSFPlugin/config/blast-config.xml.sample";
my $projects_config_origin           = "$project_home/ApiCommonWebsite/Model/config/projects.sample.xml";
my $motifSearch_config_origin        = "$project_home/ApiCommonWebService/WSFPlugin/config/motifSearch-config.xml.sample";
my $profileSimilarity_config_origin  = "$project_home/ApiCommonWebService/WSFPlugin/config/profileSimilarity-config.xml.sample";
my $apifed_config_origin             = "$project_home/ApiCommonWebService/WSFPlugin/config/apifed-config.xml.sample";

my $comment_config                   = "$wdk_product_config_dir/comment-config.xml";
my $model_config                     = "$wdk_product_config_dir/model-config.xml";
my $model_prop                       = "$wdk_product_config_dir/model.prop";
my $wdkquery_config                  = "$wdk_config_dir/wdkquery-config.xml";
my $blast_config                     = "$wdk_config_dir/blast-config.xml";
my $projects_config                  = "$wdk_config_dir/projects.xml";
my $motifSearch_config               = "$wdk_config_dir/motifSearch-config.xml";
my $profileSimilarity_config         = "$wdk_config_dir/profileSimilarity-config.xml";
my $apifed_config                    = "$wdk_config_dir/apifed-config.xml";

my %config_files = (
    'comment_config' => {
        'source' => "$project_home/ApiCommonWebsite/Model/config/$product/comment-config.xml.sample",
        'dest' => "$wdk_product_config_dir/comment-config.xml"
        },
    'model_config' => {
        'source' => "$project_home/ApiCommonWebsite/Model/config/$product/model-config.xml.sample",
        'dest' => "$wdk_product_config_dir/model-config.xml"
        },
    'model_prop' => {
        'source' => "$project_home/ApiCommonWebsite/Model/config/$product/model.prop.sample",
        'dest' => "$wdk_product_config_dir/model.prop"
        },
    'wdkquery_config' => {
        'source' => "$project_home/ApiCommonWebService/WSFPlugin/config/wdkquery-config.xml.sample",
        'dest' => "$wdk_config_dir/wdkquery-config.xml"
        },
    'blast_config' => {
        'source' => "$project_home/ApiCommonWebService/WSFPlugin/config/blast-config.xml.sample",
        'dest' => "$wdk_config_dir/blast-config.xml"
        },
    'projects_config' => {
        'source' => "$project_home/ApiCommonWebsite/Model/config/projects.sample.xml",
        'dest' => "$wdk_config_dir/projects.xml"
        },
    'motifSearch_config' => {
        'source' => "$project_home/ApiCommonWebService/WSFPlugin/config/motifSearch-config.xml.sample",
        'dest' => "$wdk_config_dir/motifSearch-config.xml"
        },
    'profileSimilarity_config' => {
        'source' => "$project_home/ApiCommonWebService/WSFPlugin/config/profileSimilarity-config.xml.sample",
        'dest' => "$wdk_config_dir/profileSimilarity-config.xml"
        },
    'apifed_config' => {
        'source' => "$project_home/ApiCommonWebService/WSFPlugin/config/apifed-config.xml.sample",
        'dest' => "$wdk_config_dir/apifed-config.xml"
        },
);


# read for product version number
my $apiCommonModel = "$gus_home/lib/wdk/apiCommonModel.xml";
my %site_versions = site_versions();
my $site_version = $site_versions{$product};
my $common_webservices_dir = (-e "/var/www/Common/prodSiteFilesMirror") ?
    "Common/prodSiteFilesMirror/webServices" :
    "Common/devSiteFilesMirror/webServices";
my $webservice_files_mirror = "$web_base_dir/$common_webservices_dir";
my $rls_webservice_data_dir = "$webservice_files_mirror/$product/release-$site_version";

my $server_hostname = qx(/bin/hostname);

my $host_class = host_class();
####################################################################
# pre-flight sanity checks
####################################################################

if ( $g_use_map && ($appDb_login || $appDb_database || $userDb_database)) {
    die "can not set specific values when using --usemap\n";;
}

if ($g_use_map) {
    die "--usemap chosen but $map_file not found\n" unless ( -r $map_file);
}

####################################################################
####################################################################

if ($g_use_map) {
    open(my $fh, $map_file) or die $!;
    my @hits = grep /^$target_site/, <$fh>;
    (my $site, $appDb_database,  $userDb_database, $appDb_login,  $userDb_login) = split(/\s+/, @hits[0]);
    print "$appDb_login\@$appDb_database,  $userDb_login\@$userDb_database\n";
    if ( ! ($appDb_login && $appDb_database && $userDb_database) ) {
        die "$map_file does not have sufficient data for $target_site. Quitting with no changes made.\n";
    }
}

my ($prod_site) = $target_site =~ m/([^\.]+\.org)/;

my $appDb_password = std_password($appDb_login, $appDb_database);
my $appDb_connectionUrl = 'jdbc:oracle:oci:@' . $appDb_database;

my $userDb_login = $userDb_login || 'uga_fed';
my $userDb_password = std_password($userDb_login, $userDb_database);;
my $userDb_connectionUrl = 'jdbc:oracle:oci:@' . $userDb_database;


# webapp_nover is always valid thanks to apache redirects, and
# is especially desired for production sites
my $webServiceUrl = 'http://' . $target_site . '/' . $webapp_nover . '/services/WsfService';

# install configuration files from source sample files 
for my $cf (keys %config_files) {
    copy( 
        $config_files{$cf}{'source'},
        $config_files{$cf}{'dest'} 
    ) or die "copy $config_files{$cf}{'source'} failed : $!";
}


####################################################################
# configuration sanity checks
####################################################################
warn "\nWARN: I do not know what dblink to use for '$userDb_database'\n" .
     "  I know about: " . join(', ', keys(%dblinkMap)) . "\n\n"
    if (dblink($userDb_database) eq '@');

testDbConnection($appDb_login, $appDb_password, $appDb_database);
testDbConnection($userDb_login, $userDb_password, $userDb_database);

if (! -d $webservice_files_mirror) {
  warn "\nWARN: '$webservice_files_mirror' does not exist\n\n";
} elsif (! -d $rls_webservice_data_dir) {
  warn "\nWARN: '$rls_webservice_data_dir' does not exist. \n" .
     "  Check that version '$site_version' in \n".
     "  '$apiCommonModel'\n" .
     "  matches release-N directory.\n\n";
}
    
####################################################################
# Config File Parsing
####################################################################

# model-config.xml ##############################################
my $m_c= new XML::Twig( 
    keep_spaces => 1, 
    PrettyPrint => 'nice',
    keep_atts_order => 1,
    TwigHandlers => {
      'modelConfig'        => \&modelConfig,
      'appDb'              => \&appDb,
      'userDb'             => \&userDb,
      'emailContent'       => \&emailContent,
      'emailSubject'       => \&emailSubject,
    }
);

$m_c->parsefile("${model_config}.sample");

open(MC, ">$model_config") || die "can not open $model_config\n";
print "writing $model_config\n";
$m_c->print(\*MC); 

recreate_wdkCache() if $recreate_wdkCache;

# comment-config.xml ###############################################
my $c_c= new XML::Twig( 
    keep_spaces => 1, 
    PrettyPrint => 'nice',
    keep_atts_order => 1,
    TwigHandlers => {
      'commentConfig' => \&commentConfig,
    }
);

$c_c->parsefile("${comment_config}.sample");

open(CC, ">$comment_config") || die "can not open $comment_config\n";
print "writing $comment_config\n";
$c_c->print(\*CC); 


# model.prop #######################################################
print "writing $model_prop\n";
parseprop("${model_prop}.sample");


# wdkquery-config.xml ##############################################
my $w_q = new XML::Twig( 
    keep_spaces => 1, 
    PrettyPrint => 'nice',
    keep_atts_order => 1,
    TwigHandlers => {
      'entry[@key="ModelName"]' => sub { $_[1]->set_text($product) },
      'entry[@key="Gus_Home"]'  => sub { $_[1]->set_text($gus_home) },
      'entry[@key="SiteModel"]' => sub { $_[1]->set_text($product) },
    }
);

$w_q->parsefile("${wdkquery_config}.sample");

open(WQC, ">$wdkquery_config") || die "can not open $wdkquery_config\n";
print "writing $wdkquery_config\n";
$w_q->print(\*WQC);

# projects.xml ###############################################

# blast-config.xml ###############################################
my $blastdb_env = "$webservice_files_mirror";

my $blast_datapath;
if ($product eq 'EuPathDB') {
    $blast_datapath = "";
} else {
    $blast_datapath = "$product/release-$site_version/blast";
}

my $wb_c= new XML::Twig( 
    keep_spaces => 1, 
    PrettyPrint => 'nice',
    keep_atts_order => 1,
    TwigHandlers => {
       'properties' => sub {
            if ($product eq 'EuPathDB') {
                $_[1]->root->first_child('entry')->
                    insert_new_elt(before => 'entry' => 
                    {'key' => 'Project'} => 'EuPathDB');
            }
      },
      'entry[@key="BlastPath"]'  => sub { 
            $_[1]->set_text("$blast_app_path");
      },
      'entry[@key="TempPath"]'  => 
                sub { $_[1]->set_text("$blast_tmp_dir") },
    }
);

$wb_c->parsefile("${blast_config}.sample");

open(WBC, ">$blast_config") || die "can not open $blast_config\n";
print "writing $blast_config\n";
$wb_c->print(\*WBC); 

# motifSearch-config.xml ###############################################
copy("${motifSearch_config}.sample", "$motifSearch_config");


# profileSimilarity-config.xml ###############################################
my $ps_c= new XML::Twig( 
    keep_spaces => 1, 
    PrettyPrint => 'nice',
    keep_atts_order => 1,
    TwigHandlers => {
      'entry[@key="perlExecutable"]'  => 
                sub { $_[1]->set_text("/usr/bin/perl") },
      'entry[@key="perlScript"]'  => 
                sub { $_[1]->set_text("$gus_home/lib/perl/ApiCommonWebService/WSFPlugin/expressionSimilarity.pl") },
      'entry[@key="numTimePoints"]'  => 
                sub { $_[1]->set_text($numTimePoints{$product}) },
      'entry[@key="skipTimes"]'  => 
                sub { $_[1]->set_text($skipTimes{$product}) },
      'entry[@key="dbConnection"]'  => 
                sub { $_[1]->set_text("dbi:Oracle:$appDb_database") },
      'entry[@key="dbLogin"]'  => 
                sub { $_[1]->set_text("$appDb_login") },
      'entry[@key="dbPassword"]'  => 
                sub { $_[1]->set_text("$appDb_password") },
      'entry[@key="projectId"]'  => 
                sub { $_[1]->set_text("$product") },
    }
);

$ps_c->parsefile("${profileSimilarity_config}.sample");

open(PSC, ">$profileSimilarity_config") || die "can not open $profileSimilarity_config\n";
print "writing $profileSimilarity_config\n";
$ps_c->print(\*PSC); 


# apifed-config.xml ###############################################
if ($product eq 'EuPathDB') {
    my $af_c= new XML::Twig( 
        keep_spaces => 1, 
        PrettyPrint => 'nice',
        keep_atts_order => 1,
        TwigHandlers => {
          'model'  => 
           sub {
             my $model = $_[1]->att('name');
             my $domain = lc "$model.org";
             my $comp_webapp = webapp_from_domain("$domain");
             my $ws_url = $webServiceUrl;
             $ws_url =~ s/$prod_site/$domain/;
             $ws_url =~ s/$webapp_nover/$comp_webapp/;
             # fixup proxied q1/b1/w1 urls
             $ws_url =~ s/a\d/alpha/;
             $ws_url =~ s/q\d/qa/;
             $ws_url =~ s/b\d/qa/;
             $ws_url =~ s/w\d\.//;
             $_[1]->set_att("url" => "$ws_url"); 
           },
        }
    );
    
    $af_c->parsefile("${apifed_config}.sample");
    
    open(AFC, ">$apifed_config") || die "can not open $apifed_config\n";
    print "writing $apifed_config\n";
    $af_c->print(\*AFC); 
}


####################################################################
# Subroutines
####################################################################

sub modelConfig {
    my ($twig, $node) = @_;
    $node->set_att('supportEmail'  => 'help@' . $prod_site);
    $node->set_att('webServiceUrl' => $webServiceUrl);
    $node->set_att('secretKeyFile' => $secretKeyFile);
    $node->set_att('modelName' => $modelName);
    $node->set_att('smtpServer' => $smtpServer);
    $node->set_att('defaultRole' => $defaultRole);
}

sub appDb {
    my ($twig, $node) = @_;
    $node->set_att('login' => $appDb_login);
    $node->set_att('password' => $appDb_password);
    $node->set_att('connectionUrl' => $appDb_connectionUrl);
    $node->set_att('platform' => $g_platform);
    $node->set_att('maxActive' => $g_maxActive);
    $node->set_att('maxIdle' => $appDb_maxIdle);
    $node->set_att('minIdle' => $appDb_minIdle);
    $node->set_att('maxWait' => $g_maxWait);
    $node->set_att('showConnections' => $g_showConnections);
    $node->set_att('showConnectionsInterval' => $g_showConnectionsInterval);
    $node->set_att('showConnectionsDuration' => $g_showConnectionsDuration);
    $node->set_att('userDbLink' => dblink($userDb_database));
}

sub userDb {
    my ($twig, $node) = @_;
    $node->set_att('login' => $userDb_login);
    $node->set_att('password' => $userDb_password);
    $node->set_att('connectionUrl' => $userDb_connectionUrl);
    $node->set_att('wdkEngineSchema' => $userDb_wdkEngineSchema);
    $node->set_att('userSchema' => $userDb_userSchema);
}

sub emailContent {
    my ($twig, $node) = @_;

    my $content = <<"EOF";

           <p>Thank you for registering at $product.</p>
           <p>Your temporary password is: \$\$PASSWORD\$\$</p>
           <p>You may now login to <a href="http://$prod_site/">$product</a>.</p>
           <p>Thank you,</p>
           <p>$product</p>
EOF
    $node->set_content(XML::Twig::Elt->new( '#CDATA' => $content));
}

sub emailSubject {
    my ($twig, $node) = @_;
    $node->set_text("Your $product Password");
}

sub commentConfig {
    my ($twig, $node) = @_;
    $node->set_att('login' => $userDb_login);
    $node->set_att('password' => $userDb_password);
    $node->set_att('connectionUrl' => $userDb_connectionUrl);
    $node->set_att('userLoginDbLink' => undef);
    $node->set_att('login' => $userDb_login);
    $node->set_att('platform' => $g_platform);
    $node->set_att('maxActive' => $g_maxActive);
    $node->set_att('maxIdle' => $cc_maxIdle);
    $node->set_att('minIdle' => $cc_minIdle);
    $node->set_att('maxWait' => $cc_maxWait);
    $node->set_att('userLoginSchema' => $g_userLoginSchema);
    $node->set_att('commentSchema' => $g_commentSchema);
    $node->set_att('userFileSchema' => $cc_userFileSchema);
    $node->set_att('userFileUploadDir' => $cc_userFileUploadDir);
}

sub dblink {
    my ($apicomm) = @_;
    %dblinkMap = (
        'apicomm'  => 'apidb.login_comment',
        'apicomms' => 'apidb.login_comment',
        'apicommn' => 'alt.login_comment',
        'apicommdevs' => 'devs.login_comment',
        'apicommdevn' => 'devn.login_comment',
    );
    
    return '@' . $dblinkMap{lc($apicomm)};
}

# retreive password from users ~/.euparc
sub std_password {
    my ($login, $database) = map{ lc } @_;
    
    my $rc = XMLin($euparc,
        ForceArray => ['user'],
        ForceContent => 1,
        KeyAttr => [ user => "login"],
        ContentKey => '-content',
    );
    
    return $rc->{database}->{$database}->{user}->{$login}->{password} ||
        $rc->{database}->{user}->{$login}->{password};
}

sub parseprop {
    my ($model_prop_sample) = @_;
    my $cndsrc_bin;
    
    for my $path (
        (
         '/files/local/software/software64/bin',
         '/usr/local/cndsrc-2006.09.19/bin',
         '/usr/local/cndsrc/bin',
         '/opt/cndsrc/bin',
        )
    ) {

        if ( -d $path ) {
            $cndsrc_bin = $path;
            last;
        }
    }
    
    if ( ! $cndsrc_bin) {
        warn "*** could not find valid value for CNDSRC_BIN for  *****\n";
        warn "*** $model_prop *****\n";
    }
    
    if ($cndsrc_bin && ! -d $cndsrc_bin) {
        warn "******* $model_prop has invalid value for CNDSRC_BIN *********\n"
    }
    
    
    open(IN, $model_prop_sample);
    open(OUT, ">$model_prop") || die "can not open $model_prop\n";
    my $revision;
    while (<IN>) {
        (m/\$Revision:\s+(\d+)/) && ($revision = $1);
        s/PROJECT_ID\s*=.*/PROJECT_ID=$product/;
        s/LOGIN_DBLINK\s*=.*/LOGIN_DBLINK=@{[dblink($userDb_database)]}/;
        s/COMMENT_DBLINK\s*=.*/COMMENT_DBLINK=@{[dblink($userDb_database)]}/;
        s/LOGIN_SCHEMA\s*=.*/LOGIN_SCHEMA=$g_userLoginSchema/;
        s/SITE_ADMIN_EMAIL\s*=.*/SITE_ADMIN_EMAIL=$site_admin_email/;
        s/CNDSRC_BIN\s*=.*/CNDSRC_BIN=$cndsrc_bin/;
        if ($revision >= 35977) {
            my $mercator_output_dir_all = "$rls_webservice_data_dir/mercator";
            my $mercator_output_dir_pairwise = "$rls_webservice_data_dir/mercator_pairwise";
            s/MERCATOR_OUTPUT_DIR\s*=.*/MERCATOR_OUTPUT_DIR=$mercator_output_dir_all/;
            s/MERCATOR_OUTPUT_DIR_PAIRWISE\s*=.*/MERCATOR_OUTPUT_DIR_PAIRWISE=$mercator_output_dir_pairwise/;
        } else {
            my $mercator_output_dir = "$rls_webservice_data_dir/mercator\n";
            s/MERCATOR_OUTPUT_DIR\s*=.*/MERCATOR_OUTPUT_DIR=$mercator_output_dir/;
        }
        if ($product eq 'EuPathDB') {
            s;AMOEBA_BLAST_PATH\s*=.*;AMOEBA_BLAST_PATH=$webservice_files_mirror/AmoebaDB/release-$site_versions{AmoebaDB}/blast;;
            s;API_BLAST_PATH\s*=.*;API_BLAST_PATH=$webservice_files_mirror/EuPathDB/release-$site_versions{EuPathDB}/blast;;
            s;CRYPTO_BLAST_PATH\s*=.*;CRYPTO_BLAST_PATH=$webservice_files_mirror/CryptoDB/release-$site_versions{CryptoDB}/blast;;
            s;FUNGI_BLAST_PATH\s*=.*;FUNGI_BLAST_PATH=$webservice_files_mirror/FungiDB/release-$site_versions{FungiDB}/blast;;
            s;GIARDIA_BLAST_PATH\s*=.*;GIARDIA_BLAST_PATH=$webservice_files_mirror/GiardiaDB/release-$site_versions{GiardiaDB}/blast;;
            s;MICRO_BLAST_PATH\s*=.*;MICRO_BLAST_PATH=$webservice_files_mirror/MicrosporidiaDB/release-$site_versions{MicrosporidiaDB}/blast;;
            s;PIRO_BLAST_PATH\s*=.*;PIRO_BLAST_PATH=$webservice_files_mirror/PiroplasmaDB/release-$site_versions{PiroplasmaDB}/blast;;
            s;PLASMO_BLAST_PATH\s*=.*;PLASMO_BLAST_PATH=$webservice_files_mirror/PlasmoDB/release-$site_versions{PlasmoDB}/blast;;
            s;TOXO_BLAST_PATH\s*=.*;TOXO_BLAST_PATH=$webservice_files_mirror/ToxoDB/release-$site_versions{ToxoDB}/blast;;
            s;TRICH_BLAST_PATH\s*=.*;TRICH_BLAST_PATH=$webservice_files_mirror/TrichDB/release-$site_versions{TrichDB}/blast;;
            s;TRYP_BLAST_PATH\s*=.*;TRYP_BLAST_PATH=$webservice_files_mirror/TriTrypDB/release-$site_versions{TriTrypDB}/blast;;
        } else {
            s;AMOEBA_BLAST_PATH\s*=.*;AMOEBA_BLAST_PATH=;;
            s;API_BLAST_PATH\s*=.*;API_BLAST_PATH=;;
            s;CRYPTO_BLAST_PATH\s*=.*;CRYPTO_BLAST_PATH=;;
            s;FUNGI_BLAST_PATH\s*=.*;FUNGI_BLAST_PATH=;;
            s;GIARDIA_BLAST_PATH\s*=.*;GIARDIA_BLAST_PATH=;;
            s;MICRO_BLAST_PATH\s*=.*;MICRO_BLAST_PATH=;;
            s;PIRO_BLAST_PATH\s*=.*;PIRO_BLAST_PATH=;;
            s;PLASMO_BLAST_PATH\s*=.*;PLASMO_BLAST_PATH=;;
            s;TOXO_BLAST_PATH\s*=.*;TOXO_BLAST_PATH=;;
            s;TRICH_BLAST_PATH\s*=.*;TRICH_BLAST_PATH=;;
            s;TRYP_BLAST_PATH\s*=.*;TRYP_BLAST_PATH=;;
        }
        
        print OUT;
    }
}

sub host_class {
    my ($host_class) = $target_site =~ m/^([^\.]+)\./;
    $host_class = 'qa' if $host_class =~ m/^q/;
    $host_class = 'beta' if $host_class =~ m/^b/;
    $host_class = '' if $host_class =~ m/^w/;
    return $host_class;
}

sub webapp_domain_map {
    return {
        'amoeba'    => 'amoebadb.org',
        'cryptodb'  => 'cryptodb.org',
        'eupathdb'  => 'eupathdb.org',
        'fungidb'   => 'fungidb.org',
        'giardiadb' => 'giardiadb.org',
        'micro'     => 'microsporidiadb.org',
        'piro'      => 'piroplasmadb.org',
        'plasmo'    => 'plasmodb.org',
        'toxo'      => 'toxodb.org',
        'trichdb'   => 'trichdb.org',
        'tritrypdb' => 'tritrypdb.org',
    };
}

sub domain_from_webapp {
    my ($webapp) = @_;
    my ($webapp_nover) =  $webapp =~ m/(^[a-zA-Z_]+)/;
    my $map = webapp_domain_map();
    return $map->{$webapp_nover};
}

sub webapp_from_domain {
    my ($domain) = @_;
    my $map = webapp_domain_map();
    my %revmap = reverse %$map;
    return $revmap{lc $domain};
}

sub site_versions {
    my %site_versions;
    my $acm = new XML::Twig( 
        keep_spaces => 1, 
        PrettyPrint => 'nice',
        keep_atts_order => 1,
        TwigHandlers => {
          'constant[@name="releaseVersion"]'  => sub { 
             $site_versions{$_[1]->att("includeProjects")} = $_[1]->text;
           },
        }
    );
    $acm->parsefile("$apiCommonModel");
    return %site_versions;
}

sub testDbConnection {
    my ($login, $password, $db) = @_;
    return if $g_skip_db_test;
    my $dbh = DBI->connect("dbi:Oracle:$db", $login, $password, {
          PrintError =>0,
          RaiseError =>0
        }) or warn "\nWARN: Can't connect to $db with $login: $DBI::errstr\n\n";;
    
    
}

sub find_euparc  {
    # ibuilder shell sets HOME to be the website and 
    # REAL_HOME to that of joeuser
    if ( -r "$ENV{REAL_HOME}/.euparc") {
        return "$ENV{REAL_HOME}/.euparc";
    } elsif ( -r "$ENV{HOME}/.euparc") {
        return "$ENV{HOME}/.euparc";
    }
    die "Required .euparc file not found\n";
}

sub recreate_wdkCache {
    print "creating new wdk cache\n";
    $ENV{PATH} = "$gus_home/bin:" . $ENV{PATH};
    $ENV{PERL5LIB} = "$gus_home/lib/perl:" . $ENV{PERL5LIB};
    $ENV{GUS_HOME} = "$gus_home";
    system("wdkCache -model $product -recreate");
}


