#!/bin/bash


Bin="$(dirname $(readlink -f "$0"))"
export BASE_GUS="${Bin%%gus_home/bin}"
export CGILIB=$BASE_GUS/cgi-lib

CONFFILE="$CGILIB/proteomeJobConfig.txt"

if [[ ! -e "$CONFFILE" ]]; then
    echo "File '$CONFFILE' not found"
    if [[ "$CGILIB" =~ "project_home" ]]; then
        echo "Be sure to run this script from \$GUS_HOME, not \$PROJECT_HOME"
    fi
    exit 1
fi

# crudely strip any spaces around '=' and source it.
# Some lines are not valid for eval, so we squash the warnings
eval "$(cat $CONFFILE | sed 's/ *=/=/' | sed 's/= */=/')" 2> /dev/null

function abort() {
    msg=$1
    echo
    echo -e '\E[;31m'"\033[1m$1\033[0m"
    exit 1
}

function ssh_without_env() {
  sshcmd="ssh $clusterUserName@$clusterServer"
  $sshcmd $1 >/dev/null 2>&1
}

function ssh_with_env() {
  sshcmd="ssh $clusterUserName@$clusterServer"
  $sshcmd "/bin/bash --rcfile $rcfile -i -c \"$1\"" >/dev/null 2>&1
}

function lscmd() {
  ls $1 >/dev/null 2>&1
}

function ok() {
  echo -e '\E[;32m'"\033[1mOK\033[0m"
}

#### WEBSERVER CHECKS ###################################################################

echo -n "checking adminEmail ... "
if [[ ! $adminEmail =~ "@" ]]; then
    abort "adminEmail '$adminEmail' looks invalid"
fi
ok


echo -n "checking resultBaseUrl ... "
if [[ ! $resultBaseUrl =~ "/$" ]]; then
    abort "resultBaseUrl needs trailing slash '/'"
fi
ok

echo -n "checking groupsFile ... "
lscmd $groupsFile || \
    abort "failed value for groupsFile:\n'$groupsFile'" 
ok

echo -n "checking controlDir ... "
lscmd $controlDir || \
    abort "failed value for controlDir:\n'$controlDir'" 
ok

echo -n "checking resultDir ... "
lscmd $resultDir || \
    abort "failed value for resultDir:\n'$resultDir'" 
ok

echo -n "checking formatdbBinDir ... "
lscmd $formatdbBinDir || \
    abort "failed value for formatdbBinDir:\n'$formatdbBinDir'" 
ok

echo -n "checking mclBin ... "
lscmd  $mclBin || \
    abort "failed value for mclBin:\n'$mclBin'"
ok

#### CLUSTER CHECKS ####################################################################

echo -n "checking clusterUserName and clusterServer ... "
ssh_without_env date || \
    abort "failed $clusterUserName@$clusterServer\nCheck clusterUserName and clusterServer"
ok

echo -n "checking nodePath ... "
ssh_without_env "ls $nodePath" || \
    abort "failed value for nodePath:\n'$nodePath'"
ok


echo -n "checking blastDbFilePath ... "
ssh_without_env "ls $blastDbFilePath" || \
    abort "failed value for blastDbFilePath:\n'$blastDbFilePath'"
ok

echo -n "checking blastBinDir ... "
ssh_without_env "ls $blastBinDir" || \
    abort "failed value for blastBinDir:\n'$blastBinDir'"
ok

echo -n "checking rcfile ... "
ssh_without_env "ls $rcfile" || \
    abort "failed value for rcfile:\n'$rcfile'"
ok

echo -n "checking clusterQueue ... "
ssh_without_env "qconf -sql | grep $clusterQueue" || \
    abort "failed value for clusterQueue:\n'$clusterQueue'"
ok

echo -n "checking nodeClass ... "
ssh_with_env "perl -e 'use $nodeClass'" || \
    abort "failed value for nodeClass:\n'$nodeClass'\nConfirm that PERL5LIB is being set on the cluster\n(hint: check $rcfile)"
ok

echo -n "checking taskClass ... "
ssh_with_env "perl -e 'use $taskClass'" || \
    abort "failed value for taskClass:\n'$taskClass'\nConfirm that PERL5LIB is being set on the cluster\n(hint: check $rcfile)"
ok

