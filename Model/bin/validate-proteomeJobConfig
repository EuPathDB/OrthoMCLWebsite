#!/bin/bash

# Two ways to run: 
#   Without options
#     $ validate-proteomeJobConfig 
#   will check orthomclProteomeSvcServer.prop and orthomclProteomeSvcCluster.prop in the 
#   'gus_home/config' directory that is relative to this script.
#   
#   Specifying the Server and Cluter prop files (full or relative paths)
#     $ validate-proteomeJobConfig  orthomclProteomeSvcServer.prop orthomclProteomeSvcCluster-zcluster.rcc.uga.edu.prop
#    will check those prop files. This is useful to check configurations before putting them in service. 

##################################################################################################
# FUNCTIONS
##################################################################################################
this_script=$(basename $0)

function usage_brief() {
    cat <<EOF 
For help, run
   $this_script --help
EOF
}

function usage() {
    cat <<EOF

Validate most of the configuation settings for the OrthoMCL 
proteome mapping service.

Two ways to run: 
  1. Without options:

    $ validate-proteomeJobConfig 

  which will check orthomclProteomeSvcServer.prop and 
  orthomclProteomeSvcCluster.prop in the 'gus_home/config' 
  directory that is relative to this script.
  
  2. Specifying the Server and Cluter prop files (full or relative paths)

    $ validate-proteomeJobConfig  orthomclProteomeSvcServer.prop \\
        orthomclProteomeSvcCluster-zcluster.rcc.uga.edu.prop

   will check those prop files. This is useful to check configurations 
   before putting them in service. 
EOF
}

function abort() {
    msg=$1
    echo
    echo -e '\E[;31m'"\033[1m$msg\033[0m"
    exit 1
}

function info() {
    msg="$1"
    echo -e '\E[;34m'"\033[1mINFO: $msg\033[0m"
}

function ok() {
  echo -e '\E[;32m'"\033[1mOK\033[0m"
}

function remote_cmd_without_env() {
  sshcmd="ssh $clusterUserName@$clusterServer"
  $sshcmd $1 >/dev/null 2>&1
}

function remote_cmd_with_env() {
  sshcmd="ssh $clusterUserName@$clusterServer"
  $sshcmd "/bin/bash --rcfile $rcfile -i -c \"$1\"" >/dev/null 2>&1
}

function lscmd() {
  ls $1 >/dev/null 2>&1
}

function is_local_dir() {
 local dir=$1
 [[ "x$dir" != 'x' && -d $dir ]]
}

function is_local_file() {
 local file=$1
 [[ "x$file" != 'x' && -f $file ]]
}

function is_local_symlink() {
 local file="$1"
 [[ "x$file" != 'x' && -L "$file" ]]
}

function local_symlink_reference() {
 local file=$1
 if [[ "x$file" != 'x' && -L $file ]]; then
   readlink -f $file
 fi

}

function is_remote_dir() {
  remote_cmd_without_env "test -d $1"
}

function is_remote_file() {
  remote_cmd_without_env "test -f $1"
}

function local_mode() {
  stat -c '%a' $1
}

function is_local_world_readable_dir() {
  stat -c '%A' $1 | grep -q '^d......r.x'
}

##################################################################################################
# SETUP
##################################################################################################

if [[ "$1" == "--help" ]]; then
  usage
  exit 0
fi

Bin="$(dirname $(readlink -f "$0"))"
export BASE_GUS="${Bin%%gus_home/bin}"
export GUS_HOME=$BASE_GUS/gus_home
export CONF_DIR=$GUS_HOME/config

SERVER_CONF=${1-$GUS_HOME/config/orthomclProteomeSvcServer.prop}
CLUSTER_CONF=${2-$GUS_HOME/config/orthomclProteomeSvcCluster.prop}
ACTIVE_CLUSTER_CONF=$GUS_HOME/config/orthomclProteomeSvcCluster.prop

if [[ ! -e "$SERVER_CONF" ]]; then
    echo "File '$SERVER_CONF' not found"
    if [[ "$BASE_GUS" =~ "project_home" ]]; then
        abort "You appear to be running \$PROJECT_HOME's copy of this script.\nUse the copy that is in \$GUS_HOME."
    fi
    exit 1
fi

if [[ ! -e "$CLUSTER_CONF" ]]; then
    echo "File '$CLUSTER_CONF' not found"
    if [[ "$BASE_GUS" =~ "project_home" ]]; then
        abort "You appear to be running \$PROJECT_HOME's copy of this script.\nUse the copy that is in \$GUS_HOME."
    fi
    exit 1
fi


# Crudely strip any spaces around '=' and source the results like an rc file to set
# BASH variables for checking.
# Some lines are not valid for eval, so we squash the warnings
eval "$(cat $SERVER_CONF | sed 's/ *=/=/' | sed 's/= */=/')" 2> /dev/null
eval "$(cat $CLUSTER_CONF | sed 's/ *=/=/' | sed 's/= */=/')" 2> /dev/null

##################################################################################################
# SPECIFIC VALIDATIONS
##################################################################################################

echo "#### WEBSERVER CHECKS #####################################################"

echo -n "checking adminEmail (Server.prop) ... "
if [[ ! $adminEmail =~ "@" ]]; then
    abort "adminEmail '$adminEmail' looks invalid"
fi
ok


echo -n "checking resultBaseUrl (Server.prop) ... "
status=$(curl -sL -w '%{http_code}' $resultBaseUrl -o /dev/null)
if [[ $status -ne 200 ]]; then
    abort "resultBaseUrl returned HTTP Status $status"
fi
ok

echo -n "checking groupsFile (Server.prop) ... "
is_local_file $groupsFile || \
    abort "invalid file for groupsFile:\n'$groupsFile'" 
ok

echo -n "checking orthomclProteomeSvcCluster.prop exists ... "
is_local_file "$CONF_DIR/orthomclProteomeSvcCluster.prop" || \
    abort "file not found:\n'$CONF_DIR/orthomclProteomeSvcCluster.prop'\n\
Maybe you want to make this a symlink to `basename $CLUSTER_CONF` by running:\n\n\
cd $CONF_DIR; ln -s `basename $CLUSTER_CONF` orthomclProteomeSvcCluster.prop"
ok


if is_local_symlink "$CONF_DIR/orthomclProteomeSvcCluster.prop"; then
   info "The active cluster property file is symlinked to\n\
   $(basename "$(local_symlink_reference $CONF_DIR/orthomclProteomeSvcCluster.prop)")"
else
    info "orthomclProteomeSvcCluster.prop is not a symlink" 
fi

echo -n "checking serverControlDir (Cluster.prop) ... "
is_local_dir $serverControlDir || \
    abort "invalid directory for serverControlDir:\n'$serverControlDir'" 
ok

echo -n "checking for 'results' subdirectory of serverControlDir ... "
is_local_dir "$serverControlDir/results" || \
    abort "$serverControlDir/results not found" 
ok

echo -n "checking 'results' is world readable ... "
is_local_world_readable_dir "$serverControlDir/results" || \
    abort "$serverControlDir/results is not world readable" 
ok

echo -n "checking for 'newJobs' subdirectory of serverControlDir ... "
is_local_dir "$serverControlDir/newJobs" || \
    abort "$serverControlDir/newJobs not found" 
ok

echo -n "checking file mode of 'newJobs' ... "
[[ $(local_mode "$serverControlDir/newJobs") =~ 777$ ]] || \
    abort "$serverControlDir/newJobs mode is not 777, apache probably can not write" 
ok

echo -n "checking formatdbBinDir (Server.prop) ... "
is_local_dir $formatdbBinDir || \
    abort "invalid directory for formatdbBinDir:\n'$formatdbBinDir'" 
ok

echo -n "checking mclBin ... "
is_local_file  $mclBin || \
    abort "invalid file for mclBin:\n'$mclBin'"
ok

echo "#### CLUSTER CHECKS #######################################################"

echo "Cluster is $clusterServer"

echo -n "checking login with clusterUserName and clusterServer (Cluster.prop) ... "
remote_cmd_without_env date || \
    abort "failed $clusterUserName@$clusterServer\nCheck clusterUserName and clusterServer"
ok

echo -n "checking nodePath (Cluster.prop) ... "
is_remote_dir $nodePath || \
    abort "invalid directory for nodePath:\n'$nodePath'"
ok

echo -n "checking serverControlDir (Cluster.prop) ... "
is_local_dir $serverControlDir || \
    abort "invalid directory for serverControlDir:\n'$serverControlDir'"
ok

echo -n "checking clusterServerDir (Cluster.prop) ... "
is_remote_dir $clusterServerDir || \
    abort "invalid directory for clusterServerDir:\n'$clusterServerDir'"
ok

echo -n "checking presence of newJobs directory on cluster ... "
is_remote_dir $clusterServerDir/newJobs || \
    abort "invalid directory for newJobs:\n'$clusterServerDir/newJobs'"
ok

echo -n "checking presence of phase1/failedJobs directory on cluster ... "
is_remote_dir $clusterServerDir/phase1/failedJobs || \
    abort "invalid directory for phase1/failedJobs:\n'$clusterServerDir/phase1/failedJobs'"
ok
echo -n "checking presence of phase1/runningJobs directory on cluster ... "
is_remote_dir $clusterServerDir/phase1/runningJobs || \
    abort "invalid directory for phase1/runningJobs:\n'$clusterServerDir/phase1/runningJobs'"
ok

echo -n "checking presence of phase2/failedJobs directory on cluster ... "
is_remote_dir $clusterServerDir/phase2/failedJobs || \
    abort "invalid directory for phase2/failedJobs:\n'$clusterServerDir/phase2/failedJobs'"
ok
echo -n "checking presence of phase2/runningJobs directory on cluster ... "
is_remote_dir $clusterServerDir/phase2/runningJobs || \
    abort "invalid directory for phase2/runningJobs:\n'$clusterServerDir/phase2/runningJobs'"
ok

echo -n "checking blastDbFilePath (Cluster.prop) ... "
is_remote_file $blastDbFilePath || \
    abort "invalid file for blastDbFilePath:\n'$blastDbFilePath'"
ok

echo -n "checking blastBinDir (Cluster.prop) ... "
is_remote_dir $blastBinDir || \
    abort "invalid directory for blastBinDir:\n'$blastBinDir'"
ok

echo -n "checking rcfile (Cluster.prop) ... "
is_remote_file $rcfile || \
    abort "invalid file for rcfile:\n'$rcfile'"
ok

echo -n "checking if qsub runs ... "
remote_cmd_with_env "qsub -help" || \
    abort "Could not run qsub.\nCheck that SGE environment is set in rcfile '$rcfile'."
ok

echo -n "checking clusterQueue (Cluster.prop) ... "
remote_cmd_with_env "qconf -sql | grep $clusterQueue" || \
    abort "invalid clusterQueue:\n'$clusterQueue'"
ok

echo -n "checking nodeClass (and \$PERL5LIB in rcfile) (Cluster.prop) ... "
remote_cmd_with_env "perl -e 'use $nodeClass'" || \
    abort "failed value for nodeClass:\n'$nodeClass'\nConfirm that PERL5LIB is being set on the cluster\n(hint: check $rcfile)"
ok

echo -n "checking taskClass (and \$PERL5LIB in rcfile) (Cluster.prop) ... "
remote_cmd_with_env "perl -e 'use $taskClass'" || \
    abort "failed value for taskClass:\n'$taskClass'\nConfirm that PERL5LIB is being set on the cluster\n(hint: check $rcfile)"
ok

echo -n "checking \$GUS_HOME ... "
remote_cmd_with_env "test -d \\\$GUS_HOME" || \
    abort "\$GUS_HOME environment variable looks bad on cluster\n(hint: check $rcfile)"
ok

info "Recommended cron:\n\
*/5 * * * * $GUS_HOME/bin/omupj-cronwrap $CLUSTER_CONF
"
